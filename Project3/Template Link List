Tlist CPP
---------------------------------------------------------------------------------
#include "tlist.h"
// destructor
 template <typename T>
 tlist<T>::~tlist()
 { 
Node *tmp;
 while(head) {
 tmp = head;
 head = head->next; 
delete tmp;
 } 
}
 // insert d before loc
 template <typename T> 
void tlist<T>::insert(Node *loc, T d)
 { 
Node *new_node = new Node(d,0);
 if(!head) { 
head = new_node;
 return;
 }
 if(loc == head) { 
push_front(d);
 return;
 } Node *cur = head;
 while(cur->next) {
 if(cur->next == loc) {
 new_node->next = cur->next;
 cur->next = new_node;
 return ;
 } 
cur = cur->next;
 }
 } 
template <typename T>
 void tlist<T>::push_back(T d)
 { 
Node *new_node = new Node(d,0);
 if(!head) {
 head = new_node;
 return; 
} Node *cur = head;
 while(cur) {
 if(!cur->next) {
 cur->next = new_node; 
return;
 } 
cur = cur->next;
 }
 } 
template <typename T> 
void tlist<T>::push_front(T d)
 { 
Node *new_node = new Node(d,0);
 if(!head) { 
head = new_node;
 return;
 }
 new_node->next = head;
 head = new_node;
 return;
 } 
template <typename T>
 T tlist<T>::pop_back()
 { 
Node *cur = head;
 while(cur) 
{
 if(!cur->next) {
 T data (cur->data);
 delete cur;
 head = NULL;
 return data; 
} 
else
{
 if(!cur->next->next) {
 T data (cur->next->data);
 cur->next = NULL;
 delete cur->next; 
return data;
 } 
} cur = cur->next; 
}
 return NULL; 
}
 template <typename T>
 T tlist<T>::pop_front() 
{
 if(!head) return NULL;
 Node *tmp = head;
 T data (head->data);
 if(head->next)
 {
 head = head->next;
 delete tmp; 
return data;
 } 
delete tmp; 
head = NULL; 
return data; 
}
template <typename T> 
void tlist<T>::erase(Node *loc)
{
 if(loc == head) 
{ 
Node *tmp = head;
 head = head->next; 
delete tmp;
 return;
 } 
Node *cur = head; 
while(cur)
{
 if(cur->next == loc) 
{
 cur->next = loc->next; 
delete loc; 
} 
cur = cur->next; 
} 
}
 template <typename T>
 typename tlist<T>::Node* tlist<T>::search(T d)
{
 if(!head) return NULL;
 Node* cur = head;
 while(cur)
{ 
if(cur->data == d) return cur;
 cur = cur->next; 
}
 return NULL; 
}
 template <typename T> 
void tlist<T>::display()
{
 if(!head) return; 
Node *cur = head;
 while(cur)
 {
 cout << cur->data << " " << endl;
 cur = cur->next; 
}
 cout << endl;
 }
 int main() 
{ 
tlist<int> *myList = new tlist<int>(NULL);
cout << "push_back() 20, 30 40, 50\n\n"; 
myList->push_back(20); 
myList->push_back(30);
myList->push_back(40);
myList->push_back(50);
myList->display(); cout << "push_front() 10\n\n";
myList->push_front(10);
myList->display(); cout << "erase 30\n\n"; 
myList->erase(myList->search(30));
myList->display(); cout << "insert 30 before 40\n\n";
myList->insert(myList->search(40),30); 
myList->display(); 
cout << "pop_back()\n"; 
cout << myList->pop_back() << " just back popped\n\n"; 
myList->display(); 
cout << "pop_front()\n"; 
cout << myList->pop_front() << " just front popped\n\n"; 
myList->display(); 
return 0;
 } 

Tlist Header
-------------------------------------------------------------------------------------------------------
#ifndef TLIST_H
#define TLIST_H
#include <iostream>
 using namespace std;
 template <typename T>

class tlist

{ 
struct Node
 { 
T data;
 Node *next; 
Node(T d, Node *n = 0):data(d), next(n) {}
 }; 
Node *head;
 public:
 tlist(Node *h = 0):head(h){}
 ~tlist();
 void insert(Node *loc, T d);
 void push_back(T d); 
void push_front(T d);
 T pop_back();
 T pop_front();
 void erase(Node *loc); 
void display(); 
Node *search(T d); 

};

#endif
-------------------------------------------------------------------------------------
Part 2 STL class

// simple linked list program

 
#include <STDLIB.H>

#include <STRING>

#include <IOSTREAM>

using std::cout;

using std::string;

 
// node object for the linked list

struct Node {

    int data;

    Node* link;

};
 

// implement a singly linked list

class LinkedList {protected:

    Node* front;        // pointer to the front of the linked list

    Node* back;         // pointer to the last node in the linked list

 
public:

    // constructs an empty list

    LinkedList() {

        front = back = NULL;

    }


    // deletes the list

    ~LinkedList() {

        // remove objects from the list as long as list is not empty

        while(Length() > 0) {

            RemoveFront();

        }

    }


    // inserts a node at the front of the list

    void InsertFront(int newValue) {

        Node* newNode = new Node;

        newNode->data = newValue;

        if (front == NULL) {

            // list must be empty so make front & back point to new node

            front = back = newNode;

            newNode->link = NULL;

        } else {

            // list is not empty so insert between front and first node

            newNode->link = front;

            front = newNode;

        }

    }


    // removes a node from the front of the list

    int RemoveFront() {

        int returnVal;

        Node *temp;

        if (front != NULL) {

            // list is not empty so remove & return first node

            returnVal = front->data;

            temp = front;

            front = front->link;

        } else {

            // list is empty just return 0

            returnVal = 0;

        }

        return returnVal;

    }


    // returns the length of the list

    int Length() {

        Node* p;

        int count = 0;

        // loop through each node in the list until we find a null value

        for (p = front; p != NULL; p = p->link) {

            count++;

        }

        return count;

    }


    // outputs a string containing all the data values in the list

    void Output() {

        Node* p;

        // loop through each node in the list until we find a null value

        for (p = front; p != NULL; p = p->link) {

            cout << p->data << ", ";

        }

    }


      //search the list for a target value

      //return index if found or -1 if not found

      int Search(int targetVal)

      {

            Node* p;

            int count = 0;

            for (p = front; p != NULL; p = p->link)

            {

                  if(p->data == targetVal)

                  {

                        return count;

                  }

                  count ++;

            }

            return -1;

      }

};


// use inheritance to create a Set class from the LinkedList class

class Set : public LinkedList 

{

public:

    // insert a new value only if it is unique (not already in the set) 

    void Insert(int newValue) 

      {

            if (Search(newValue) == -1)

                  InsertFront(newValue);

      }


    // make this the union of two sets

    void Union(Set& a, Set& b) 

      {

            Node *p;

 

            p = a.front;

            for (int i = 0; i < a.Length(); i++){

                  Insert(p->data);

                  p = p->link;

            }

            p = b.front;

            for (int i = 0; i < b.Length(); i++){

                  Insert(p->data);

                  p = p->link;

            }


            p = NULL;

    }


    // make this the intersection of two sets

    void Intersection(Set& a, Set& b)

      {

            int *alist = new int [a.Length()];

            int *blist = new int [b.Length()];

            Node *p;

 

            p = a.front;

            for (int i = 0; i < a.Length(); i++){

                  alist[i] = p->data;

                  p = p->link;

            }


            p = b.front;

            for (int i = 0; i < b.Length(); i++){

                  blist[i] = p->data;

                  p = p->link;

            }


            p = NULL;

            for (int i = 0; i < a.Length(); i++){

                  for (int j = 0; j < b.Length(); j++){

                        if (alist[i] == blist[j])

                              Insert(alist[i]);

                  }

            }

            delete[] alist, blist;

    }

};

 

 main() {

    Set setA, setB, setUnion, setIntersection;

 

    setA.Insert(5);

    setA.Insert(2);

    setA.Insert(3);

    setA.Insert(5);

    setA.Insert(2);

 

    cout << "Contents of setA: ";

    setA.Output();

    cout << "\n\n";

 

    setB.Insert(1);

    setB.Insert(2);

    setB.Insert(4);


    cout << "Contents of setB: ";

    setB.Output();

    cout << "\n\n";


    setUnion.Union(setA, setB);

    cout << "Contents of setA union setB: ";

    setUnion.Output();

    cout << "\n\n";

 

    setIntersection.Intersection(setA, setB);

    cout << "Contents of setA intersection setB: ";

    setIntersection.Output();

    cout << "\n\n";

}

